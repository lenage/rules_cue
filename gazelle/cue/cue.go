package cuelang

import (
	"fmt"

	"github.com/bazelbuild/bazel-gazelle/config"
	"github.com/bazelbuild/bazel-gazelle/language"
	"github.com/bazelbuild/bazel-gazelle/rule"
)

const (
	cueName = "cue"
)

var _ = fmt.Printf

type cueLang struct{}

// NewLanguage returns an instace of the Gazelle plugin for rules_cue.
func NewLanguage() language.Language {
	return &cueLang{}
}

func (cl *cueLang) Name() string { return cueName }

// Kinds returns a map of maps rule names (kinds) and information on
// how to match and merge attributes that may be found in rules of
// those kinds. All kinds of rules generated for this language may be
// found here.
func (cl *cueLang) Kinds() map[string]rule.KindInfo {
	return map[string]rule.KindInfo{
		// @com_github_tnarg_rules_cue kinds
		"cue_library": {
			MatchAttrs: []string{"importpath"},
			NonEmptyAttrs: map[string]bool{
				"deps": true,
				"srcs": true,
			},
			MergeableAttrs: map[string]bool{
				"srcs":       true,
				"importpath": true,
			},
			ResolveAttrs: map[string]bool{"deps": true},
		},
		"cue_export": {
			NonEmptyAttrs: map[string]bool{
				"deps": true,
				"src":  true,
			},
			MergeableAttrs: map[string]bool{
				"escape":        true,
				"output_format": false,
				"src":           true,
			},
			ResolveAttrs: map[string]bool{"deps": true},
		},
		"cue_repository": {
			MatchAttrs: []string{"importpath"},
			NonEmptyAttrs: map[string]bool{
				"importpath": true,
				"sha256":     true,
				"urls":       true,
			},
			MergeableAttrs: map[string]bool{
				"importpath":   true,
				"sha256":       true,
				"strip_prefix": true,
				"type":         true,
				"urls":         true,
			},
		},

		// @com_github_seh_rules_cue kinds
		"cue_module": {
			MatchAttrs: []string{"file"},
		},
		"cue_instance": {
			MatchAttrs: []string{"package_name"},
			NonEmptyAttrs: map[string]bool{
				"srcs":     true,
				"deps":     true,
				"ancestor": true,
			},
			MergeableAttrs: map[string]bool{
				"deps":         true,
				"package_name": true,
				"ancestor":     true,
				"srcs":         true,
			},
			ResolveAttrs: map[string]bool{"deps": true},
		},
		// cue_exported_instance: Takes a CUE instance and exports it to a specified output format, preserving the structure defined in the instance
		"cue_exported_instance": {
			MatchAttrs: []string{"instance"},
			NonEmptyAttrs: map[string]bool{
				"instance": true,
			},
			MergeableAttrs: map[string]bool{
				"escape":        true,
				"output_format": false,
				"result":        true,
			},
		},
		// cue_consolidated_instance: Takes a CUE instance (a package with imports) and outputs a consolidated definition with all dependencies resolved.
		"cue_consolidated_instance": {
			MatchAttrs: []string{"instance"},
			NonEmptyAttrs: map[string]bool{
				"instance": true,
			},
			ResolveAttrs: map[string]bool{"deps": true},
		},
		// cue_consolidated_files: Consolidates CUE files that are part of a module into a single output file in a specified format.
		"cue_consolidated_files": {
			NonEmptyAttrs: map[string]bool{
				"deps": true,
			},
			MergeableAttrs: map[string]bool{
				"output_format": false,
				"result":        true,
			},
			ResolveAttrs: map[string]bool{"deps": true},
		},
		//cue_consolidated_standalone_files: Processes standalone CUE files (not part of a module) and outputs a consolidated definition in a specified format.
		"cue_consolidated_standalone_files": {
			MergeableAttrs: map[string]bool{
				"output_format": false,
				"result":        true,
			},
			ResolveAttrs: map[string]bool{"deps": true},
		},
		//cue_exported_files: Exports CUE files that are part of a CUE module to a specified output format (JSON, YAML, etc.).
		"cue_exported_files": {
			MatchAttrs: []string{"srcs", "module"},
			NonEmptyAttrs: map[string]bool{
				"deps":   true,
				"module": true,
			},
			MergeableAttrs: map[string]bool{
				"escape":        true,
				"output_format": false,
				"result":        true,
				"srcs":          true,
			},
			ResolveAttrs: map[string]bool{"deps": true},
		},
		// cue_exported_standalone_files processes CUE files without requiring them to be part of a CUE module structure.
		"cue_exported_standalone_files": {
			MergeableAttrs: map[string]bool{
				"escape":        true,
				"output_format": false,
				"result":        true,
			},
			ResolveAttrs: map[string]bool{"deps": true},
		},
	}
}

// Loads returns .bzl files and symbols they define. Every rule
// generated by GenerateRules, now or in the past, should be loadable
// from one of these files.
func (cl *cueLang) Loads() []rule.LoadInfo {
	return []rule.LoadInfo{
		{
			Name: "@com_github_tnarg_rules_cue//cue:deps.bzl",
			Symbols: []string{
				"cue_register_toolchains",
			},
			After: []string{
				"gazelle_dependencies",
			},
		}, {
			Name: "@com_github_tnarg_rules_cue//cue:cue.bzl",
			Symbols: []string{
				"cue_export",
				"cue_library",
				"cue_repository",
			},
			After: []string{
				"cue_register_toolchains",
			},
		},
		//NOTE(yuan): cue_register_toolchains naming conflict
		{
			Name: "@rules_cue//cue:deps.bzl",
			Symbols: []string{
				"cue_register_toolchains",
			},
			After: []string{
				"gazelle_dependencies",
			},
		}, {
			Name: "@rules_cue//cue:cue.bzl",
			Symbols: []string{
				"cue_module",
				"cue_instance",
				"cue_exported_instance",
				"cue_consolidated_instance",
				"cue_consolidated_files",
				"cue_consolidated_standalone_files",
				"cue_exported_files",
				"cue_exported_standalone_files",
			},
			After: []string{
				"cue_register_toolchains",
			},
		},
	}
}

// Fix repairs deprecated usage of language-specific rules in f. This
// is called before the file is indexed. Unless c.ShouldFix is true,
// fixes that delete or rename rules should not be performed.
func (cl *cueLang) Fix(c *config.Config, f *rule.File) {
	// Remove cue_library rules if ShouldFix is true
	if c.ShouldFix {
		var newRules []*rule.Rule
		for _, r := range f.Rules {
			if r.Kind() != "cue_library" {
				newRules = append(newRules, r)
			}
		}
		f.Rules = newRules
	}
}
